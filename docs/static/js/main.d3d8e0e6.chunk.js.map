{"version":3,"sources":["routes/index.js","components/Navbar.js","components/Loading.js","components/FontSizeRoot.js","App.js","reportWebVitals.js","index.js","consts/fontsize.js","contexts/fontsize.js"],"names":["routes","exact","path","name","component","lazy","Promise","res","setTimeout","Navbar","map","route","index","to","className","activeClassName","Loading","FontSizeRoot","rest","fontSize","useContext","FontSizeContext","useState","fontSizeClassName","setFontSizeClassName","useEffect","fontSizeConstants","SMALL","MEDIUM","LARGE","children","App","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","defaultValue","setFontSize","createContext","parseFontSize","size","isNaN","Number","parseInt","Object","values","indexOf","FontSizeContextProvider","props","storedSize","localStorage","getItem","setState","state","setItem","Provider","value","displayName"],"mappings":"kPA0EeA,EA7BA,CACb,CACEC,OAAO,EACPC,KAAM,IACNC,KAAM,OACNC,UAjBSC,aAAK,WAChB,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAI,iCACH,YAeL,CACEL,KAAM,SACNC,KAAM,QACNC,UAfUC,aAAK,kBAAM,kCAiBvB,CACEH,KAAM,QACNC,KAAM,OACNC,UAnBSC,aAAK,kBAAM,kCAqBtB,CACEH,KAAM,QACNC,KAAM,OACNC,UAvBSC,aAAK,kBAAM,kCAyBtB,CACEH,KAAM,YACNC,KAAM,WACNC,UA3BaC,aAAK,kBAAM,mC,QCdbI,MAzBf,WAEE,OACE,8BACE,6BAEIT,EAAOU,KAAI,SAACC,EAAOC,GACjB,OACE,6BACE,cAAC,IAAD,CACEX,OAAQ,EACRY,GAAKF,EAAMT,KACXY,UAAU,UACVC,gBAAgB,iBAJlB,SAKIJ,EAAMR,QANFS,WCDTI,MATf,WAEE,OACE,cAAC,WAAD,0B,iCCgCWC,MAjCf,YAA+C,IAAvBH,EAAsB,EAAtBA,UAAcI,EAAQ,6BACpCC,EAAaC,qBAAWC,KAAxBF,SACR,EAAkDG,mBAAS,IAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KAsBA,OApBAC,qBAAU,WACR,OAAON,GACL,KAAKO,IAAkBC,MACrBH,EAAqB,gBACrB,MAEF,KAAKE,IAAkBE,OACrBJ,EAAqB,gBACrB,MAEF,KAAKE,IAAkBG,MACrBL,EAAqB,gBACrB,MAEF,QACEA,EAAqB,mBAGxB,CAACL,IAGF,6CAAKL,UAAS,UAAOS,EAAP,YAA8BT,IAAoBI,GAAhE,aAEIA,EAAKY,aCEEC,MA1Bf,WAEE,OACE,cAAC,WAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,UACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAW,cAAC,EAAD,IAArB,SAEIhC,EAAOU,KAAI,SAACC,EAAOC,GACjB,OACE,cAAC,IAAD,eAA0BD,GAAbC,oBCRpBqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,qMClBO,IAAMN,EAAQ,GAGRC,EAAS,GAGTC,EAAQ,I,6GCJfkB,EAAe,CACnB5B,SAAUA,IAASS,OACnBoB,YAAa,cAGT3B,EAAkB4B,wBAAcF,GAKtC,SAASG,EAAcC,GACrB,OAAGC,MAAMD,GAAcJ,EAAa5B,UAEpCgC,EAAOE,OAAOC,SAASH,IAEL,IADAI,OAAOC,OAAOrC,KAAUsC,QAAQN,GACtBJ,EAAa5B,SAElCgC,GAGF,SAASO,EAAwBC,GACtC,IAMMC,EAAaC,aAAaC,QAAQ,YACxC,EAA0BxC,mBAAS,CACjCH,SAAU+B,EAAcU,GACxBZ,YATkB,SAACG,GACnBA,EAAOD,EAAcC,GACrBY,EAAS,2BAAKC,GAAN,IAAa7C,SAAUgC,QAKjC,mBAAOa,EAAP,KAAcD,EAAd,KASA,OAJAtC,qBAAU,WACRoC,aAAaI,QAAQ,WAAYD,EAAM7C,YACtC,CAAC6C,IAGF,cAAC3C,EAAgB6C,SAAjB,CAA0BC,MAAQH,EAAlC,SAEIL,EAAM7B,WAlCdT,EAAgB+C,YAAc,kBAEf/C,Q","file":"static/js/main.d3d8e0e6.chunk.js","sourcesContent":["import { lazy } from '@loadable/component';\r\n// import Loading from '../components/Loading';\r\n// import { lazy } from 'react';\r\n\r\n// standalone\r\n// import { Home, About, Blog, Docs } from '../views';\r\n\r\n// loadable component\r\n// const Home = loadable(() => {\r\n//   return new Promise((res) => {\r\n//     setTimeout(() => {\r\n//       res(import('../views/Home'));\r\n//     }, 5000);\r\n//   });\r\n// }, {\r\n//   fallback: <Loading />\r\n// });\r\n// const About = loadable(() => import('../views/About'));\r\n// const Blog = loadable(() => import('../views/Blog'));\r\n// const Docs = loadable(() => import('../views/Docs'));\r\n\r\n// react lazy\r\n// const Home = lazy(() => {\r\n//   return new Promise((res) => {\r\n//     setTimeout(() => {\r\n//       res(import('../views/Home'));\r\n//     }, 3000);\r\n//   });\r\n// });\r\n// const About = lazy(() => import('../views/About'));\r\n// const Blog = lazy(() => import('../views/Blog'));\r\n// const Docs = lazy(() => import('../views/Docs'));\r\n\r\nconst Home = lazy(() => {\r\n  return new Promise((res) => {\r\n    setTimeout(() => {\r\n      res(import('../views/Home'));\r\n    }, 3000);\r\n  });\r\n});\r\nconst About = lazy(() => import('../views/About'));\r\nconst Blog = lazy(() => import('../views/Blog'));\r\nconst Docs = lazy(() => import('../views/Docs'));\r\nconst Settings = lazy(() => import('../views/Settings'));\r\n\r\nconst routes = [\r\n  {\r\n    exact: true,\r\n    path: '/',\r\n    name: 'Home',\r\n    component: Home\r\n  },\r\n  {\r\n    path: '/about',\r\n    name: 'About',\r\n    component: About\r\n  },\r\n  {\r\n    path: '/blog',\r\n    name: 'Blog',\r\n    component: Blog\r\n  },\r\n  {\r\n    path: '/docs',\r\n    name: 'Docs',\r\n    component: Docs\r\n  },\r\n  {\r\n    path: '/settings',\r\n    name: 'Settings',\r\n    component: Settings\r\n  },\r\n];\r\n\r\nexport default routes;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from '../routes'\r\n\r\nfunction Navbar() {\r\n\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        {\r\n          routes.map((route, index) => {\r\n            return (\r\n              <li key={ index } >\r\n                <NavLink \r\n                  exact={ true } \r\n                  to={ route.path} \r\n                  className=\"navlink\" \r\n                  activeClassName=\"navlink-active\" >\r\n                  { route.name }\r\n                </NavLink>\r\n              </li>\r\n            );\r\n          })\r\n        }\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React, { Fragment } from 'react';\r\n\r\nfunction Loading() {\r\n\r\n  return (\r\n    <Fragment>\r\n      Loading...\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Loading;","import React, { useContext, useEffect, useState } from 'react';\r\nimport { fontSize as fontSizeConstants } from '../consts';\r\nimport FontSizeContext from '../contexts/fontsize';\r\n\r\nfunction FontSizeRoot({ className, ...rest }) {\r\n  const { fontSize } = useContext(FontSizeContext);\r\n  const [fontSizeClassName, setFontSizeClassName] = useState('');\r\n\r\n  useEffect(() => {\r\n    switch(fontSize) {\r\n      case fontSizeConstants.SMALL:\r\n        setFontSizeClassName('font-size-sm');\r\n        break;\r\n\r\n      case fontSizeConstants.MEDIUM:\r\n        setFontSizeClassName('font-size-md');\r\n        break;\r\n\r\n      case fontSizeConstants.LARGE:\r\n        setFontSizeClassName('font-size-lg');\r\n        break;\r\n\r\n      default:\r\n        setFontSizeClassName('font-size-md');\r\n        break;\r\n    }\r\n  }, [fontSize]);\r\n\r\n  return (\r\n    <div className={ `${ fontSizeClassName } ${ className }` } { ...rest } >\r\n      {\r\n        rest.children\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FontSizeRoot;","import React, { Fragment, Suspense } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Navbar, Loading } from './components';\nimport FontSizeRoot from './components/FontSizeRoot';\nimport { FontSizeContextProvider } from './contexts/fontsize';\nimport routes from './routes';\n\nfunction App() {\n\n  return (\n    <Fragment>\n      <FontSizeContextProvider>\n        <FontSizeRoot>\n          <BrowserRouter>\n            <Navbar />\n            <Switch>\n              <Suspense fallback={ <Loading /> } >\n                {\n                  routes.map((route, index) => {\n                    return (\n                      <Route key={ index } { ...route } />\n                    );\n                  })\n                }\n              </Suspense>\n            </Switch>\n          </BrowserRouter>\n        </FontSizeRoot>\n      </FontSizeContextProvider>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// tama単o de fuente peque単a\r\nexport const SMALL = 13;\r\n\r\n// tama単o de fuente mediana\r\nexport const MEDIUM = 16;\r\n\r\n// tama単o de fuente grande\r\nexport const LARGE = 18;","import { createContext, useEffect, useState } from \"react\";\r\nimport { fontSize } from '../consts';\r\n\r\nconst defaultValue = {\r\n  fontSize: fontSize.MEDIUM, \r\n  setFontSize: () => {}\r\n};\r\n\r\nconst FontSizeContext = createContext(defaultValue);\r\nFontSizeContext.displayName = 'FontSizeContext';\r\n\r\nexport default FontSizeContext;\r\n\r\nfunction parseFontSize(size) {\r\n  if(isNaN(size)) return defaultValue.fontSize;\r\n\r\n  size = Number.parseInt(size);\r\n  const sizeIndex = Object.values(fontSize).indexOf(size);\r\n  if(sizeIndex === -1) return defaultValue.fontSize;\r\n\r\n  return size;\r\n}\r\n\r\nexport function FontSizeContextProvider(props) {\r\n  const setFontSize = (size) => {\r\n    size = parseFontSize(size);\r\n    setState({ ...state, fontSize: size });\r\n  }\r\n\r\n  // Estado inicial del contexto\r\n  const storedSize = localStorage.getItem('fontSize');\r\n  const [state, setState] = useState({\r\n    fontSize: parseFontSize(storedSize),\r\n    setFontSize\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('fontSize', state.fontSize);\r\n  }, [state]);\r\n\r\n  return (\r\n    <FontSizeContext.Provider value={ state } >\r\n      {\r\n        props.children\r\n      }\r\n    </FontSizeContext.Provider>\r\n  );\r\n}"],"sourceRoot":""}